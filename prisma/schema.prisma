// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model HqAdmin {
  id            Int             @id @default(autoincrement())
  username      String          @unique
  password      String
  first_name    String
  last_name     String
  contact       String
  email         String
  role          String          @default("hqadmin")
  created_at    DateTime        @default(now())
  unit          Unit?           @relation(fields: [unitId], references: [id])
  activity      Activity[]
  donation      Donation[]
  announcements Announcements[]
  unitId        Int?            @unique
}

model DistrictManager {
  id            Int             @id @default(autoincrement())
  username      String          @unique
  password      String
  first_name    String
  last_name     String
  contact       String
  district      String
  email         String
  role          String          @default("districtManager")
  created_at    DateTime        @default(now())
  activity      Activity[]
  announcements Announcements[]
  Unit          Unit[]
}

model UnitLeader {
  id            Int             @id @default(autoincrement())
  username      String          @unique
  password      String
  first_name    String
  last_name     String
  contact       String
  district      String
  email         String
  role          String          @default("UnitLeader")
  created_at    DateTime        @default(now())
  activity      Activity[]
  announcements Announcements[]
  Unit          Unit?
  unitId        Int             @unique
}

model Member {
  id         Int        @id @default(autoincrement())
  email      String
  First_name String
  last_name  String
  member_id  String     @default(uuid())
  contact    String
  category   String
  hasCard    Boolean
  joined_at  DateTime   @default(now())
  unit_name  String
  district   String
  address    String
  role       String
  occupation String
  activities Activity[]
  Unit       Unit?      @relation(fields: [unitId], references: [id])
  unitId     Int?
}

model Unit {
  id                Int             @id @default(autoincrement())
  username          String
  districtManager   DistrictManager @relation(fields: [districtManagerId], references: [id])
  districtManagerId Int
  UnitLeader        UnitLeader?      @relation(fields: [unitLeaderId], references: [id])
  unitLeaderId      Int?             @unique
  district          String
  HqAdmin           HqAdmin?
  hqAdminId         Int
  member            Member[]
}

model Activity {
  id                String            @id @default(uuid())
  name              String
  date              DateTime
  venue             String
  description       String
  created_at        DateTime
  members           Member[]
  admin_id          Int             
  admin             HqAdmin          @relation(fields: [admin_id], references: [id])
  DistrictManager   DistrictManager? @relation(fields: [districtManagerId], references: [id])
  districtManagerId Int?
  UnitLeader        UnitLeader?      @relation(fields: [unitLeaderId], references: [id])
  unitLeaderId      Int?
}

model Announcements {
  id                Int              @id @default(autoincrement())
  title             String
  communique        String
  created_at        DateTime
  admin_id          Int              @unique
  admin             HqAdmin          @relation(fields: [admin_id], references: [id])
  DistrictManager   DistrictManager? @relation(fields: [districtManagerId], references: [id])
  districtManagerId Int?
  UnitLeader        UnitLeader?      @relation(fields: [unitLeaderId], references: [id])
  unitLeaderId      Int?
}

model Donation {
  id         Int      @id @default(autoincrement())
  about      String
  title      String
  target     String
  paidAmount String
  created_at DateTime @default(now())
  admin_id   Int
  admin      HqAdmin  @relation(fields: [admin_id], references: [id])
}

model Applicants {
  id            Int      @id @default(autoincrement())
  email         String
  First_name    String
  last_name     String
  applicant_id  String   @default(uuid())
  contact       String
  district      String
  Sector        String
  occupation    String
  gender        String
  age           String
  reason        String
  joined_at     DateTime
  requeste_unit String
}

 model Payments {
id Int @id @unique
name String
email String
contact String
message String
amount Int
ref String 
created_at DateTime
processed_at DateTime
type String
donation_id String?
status String

 }